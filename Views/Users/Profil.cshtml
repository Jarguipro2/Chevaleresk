@model EFA_DEMO.Models.UserView

@{
    ViewBag.Title = "Profil";
}

<h2>Profil de: <u>@Model.FullName</u></h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.AvatarId)
        @Html.Hidden("PasswordChangeToken", (string)ViewBag.PasswordChangeToken)

        <div class="form-group">
            @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.NewPassword, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NewPassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Confirmation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Confirmation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Confirmation, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.AvatarImageData, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div style="width:200px">
                    @Helper.ImageUploader(Model.Id, Model.GetAvatarURL(), "AvatarImageData", "~/Avatars/Loading_icon.gif", "Cliquez pour choisir votre avatar")
                    @Html.ValidationMessage("AvatarImageData", "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Money, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (OnlineUsers.CurrentUserIsAdmin())
                {
                    @Html.EditorFor(model => model.Money, new { htmlAttributes = new { @class = "form-control" } })
                }
                else
                {
                    <div class="pad-top-7">
                        @Html.DisplayFor(model => model.Money, new { htmlAttributes = new { @class = "form-control " } })
                        $
                    </div>}

                @Html.ValidationMessageFor(model => model.Money, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Admin, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (OnlineUsers.CurrentUserIsAdmin())
                {
                    @Html.DropDownList(
                     "Admin",
                     new SelectList(
                         new[]
                         {
                            new { Value = "true", Text = "Oui"},
                            new { Value = "false", Text = "Non"},

                         },
                         "Value",
                         "Text"
                         ), new { @class = "form-control" })
                }
                else
                {
                    <div class="pad-top-7">
                        @Html.DisplayFor(model => model.Admin, new { htmlAttributes = new { @class = "form-control" } })

                    </div>
                }

                @Html.ValidationMessageFor(model => model.Money, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Modifier" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/imageUploader")
<script>
        $(() => { UserNameValidation(); });
        $(() => { EmailValidation(); });

    function UserNameValidation() {

        if ($('#Username').val() != currentId.Username.val()) {

            $('#Username').rules("add", {
                remote: {
                    url: "@Url.Action("UserNameAvailable", "Users")",
                    type: "post",
                    data: { Username: () => { return $('#Username').val(); } }
                },
                messages: { remote: "Non disponible" }
            });
        }
    }

    function EmailValidation() {
        if ($('#Email').val() != currentId.Email.val()) {
        $('#Email').rules("add", {
            remote: {
                url: "@Url.Action("EmailAvailable", "Users")",
                type: "post",
                data: { Username: () => { return $('#Email').val(); } }
            },
            messages: { remote: "Non disponible" }
        });
    }
    $(function () {
        $("#NewPassword").val($("#PasswordChangeToken").val());
        $("#Confirmation").val($("#PasswordChangeToken").val());
    })
</script>
}
